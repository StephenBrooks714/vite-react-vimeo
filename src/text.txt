<AuthProvider projectId="P2iZjNXGSatWX9XwEUooVc5q9qqz">
	<Descope
		flowId="sign-up-or-in"
		theme="light"
		onSuccess={(e) => {
			console.log(e.detail.user.name)
			console.log(e.detail.user.email)
		}}
		onError={(err) => {
			console.log("Error!", err)
		}}
	/>
</AuthProvider>


import { useCallback } from 'react'
import Home from '../App.jsx'
import { useDescope, useSession, useUser } from '@descope/react-sdk'
import { Descope } from '@descope/react-sdk'
import { getSessionToken } from '@descope/react-sdk';

const App = () => {
    const { isAuthenticated, isSessionLoading } = useSession()
    const { user, isUserLoading } = useUser()
    const { logout } = useDescope();
    const isTenant = "T2iZdVX5hVSCKW21BgU8Th5dSBwZ";
    const roles=["admin"]

// Return value : Boolean (true or false)
    try {
        const isRoleValid =  descopeClient.validateRoles(authInfo, roles);
        if (isRoleValid) {
            console.log("These roles are valid for user")
        } else {
            console.log("These roles are invalid for user")
        }
    } catch (error) {
        console.log ("Could not confirm if roles are valid - error prior to confirmation. " + error);
    }

    const exampleFetchCall = async () => {
        const sessionToken = getSessionToken();

        // example fetch call with authentication header
        fetch('your_application_server_url', {
            headers: {
                Accept: 'application/json',
                Authorization: 'Bearer ' + sessionToken,
            }
        })
    }

    const handleLogout = useCallback(() => {
        logout().then(() => window.location.reload());
    }, [logout], Home)

    return <>
        {!isAuthenticated &&
            (
                <Descope
                    flowId="sign-up-or-in"
                    onSuccess={(e) => console.log(e.detail.user)}
                    onError={(e) => console.log('Could not log in!')}
                />
            )
        }

        {
            (isSessionLoading || isUserLoading) && <p>Loading...</p>
        }

        {!isUserLoading && isAuthenticated && isTenant &&
            (
                <>
                    <p>Hello {user.name}</p>
                    <div>My Private Component</div>
                    <button onClick={handleLogout}>Logout</button>
                </>
            )
        }
    </>;
}

export default App;